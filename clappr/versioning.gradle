ext {
    def version_regex = "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}"
    def version_snapshot_regex = "-SNAP[-\\w]*-\\d{14}"
    def version_rc_regex = "-RC-\\d{14}"
    def RC = "RC"
    def RELEASE = "RELEASE"
    def SNAPSHOT = "SNAPSHOT"

    buildVersionCode = { version ->
        def (major, minor, patch) = version.toLowerCase().tokenize('.')
        patch = patch.tokenize('-').first()

        (major, minor, patch) = [major, minor, patch].collect{it.toInteger()}

        (major * 1000000) + (minor * 1000) + patch;
    }
    buildVersionType = { version ->
        if (version.toUpperCase().contains("SNAPSHOT")) {
            throw new Exception("Reserved word \"SNAPSHOT\" can not be used in the version name")
        } else if (version.matches(version_regex + version_snapshot_regex)) {
            SNAPSHOT;
        } else if (version.matches(version_regex + version_rc_regex)) {
            RC;
        } else if (version.matches(version_regex)) {
            RELEASE;
        } else {
            throw new Exception("Wrong version format \"$version\"")
        }
    }
    buildPublishAttrs = { version ->
        def versionType = buildVersionType(version)
        def versionName = version
        def versionCode = buildVersionCode(version)

        def bintrayRepoName = (versionType == SNAPSHOT)? 'clappr-android-snapshot' : 'clappr-android-release'
        def bintrayVersionDesc = (versionType == SNAPSHOT)? 'Clappr snapshot' : (versionType == RC)? 'Clappr candidate alpha version': 'Clappr alpha version'
        def bintrayPublishNonDefault = false
        println "Building $bintrayVersionDesc ($versionCode - $versionName) as $versionType to publish on $bintrayRepoName"

        [
                versionCode: versionCode,
                versionName: versionName,
                versionType: versionType,
                bintrayRepoName: bintrayRepoName,
                bintrayVersionDesc: bintrayVersionDesc,
                bintrayPublishNonDefault: bintrayPublishNonDefault
        ];
    }
}
