ext {
    buildVersionCode = { version ->
        def (major, minor, patch) = version.toLowerCase().tokenize('.')
        patch = patch.tokenize('-').first()

        (major, minor, patch) = [major, minor, patch].collect{it.toInteger()}

        (major * 1000000) + (minor * 1000) + patch;
    }
    // major.minor.patch[-abc]
    isWellFormatted = { version ->
        version.matches("\\d{1,3}.\\d{1,3}.\\d{1,3}[-\\w]*");
    }
    buildVersionType = { version ->
        if (version.toUpperCase().contains("SNAPSHOT")) {
            throw new Exception("Reserved word \"SNAPSHOT\" can not be used in the version name")
        } else if (isWellFormatted(version) == false) {
            throw new Exception("Wrong version format \"$version\"")
        } else if (version.contains("-RC")) {
            "RC";
        } else if (version.matches("\\d{1,3}.\\d{1,3}.\\d{1,3}")) {
            "RELEASE";
        } else {
            throw new Exception("Wrong version format \"$version\"")
        }
    }
    buildPublishAttrs = { version ->
        def versionType = buildVersionType(version)
        def versionName = version
        def versionCode = buildVersionCode(version)

        def bintrayRepoName = (versionType == "RC")? 'clappr-android-snapshot' : 'clappr-android-release'
        def bintrayVersionDesc = versionType == "RC"? 'Clappr release candidate' : 'Clappr alpha version'
        println "Building $bintrayVersionDesc ($versionCode - $versionName) as $versionType to publish on $bintrayRepoName"

        [
                versionCode: versionCode,
                versionName: versionName,
                versionType: versionType,
                bintrayRepoName: bintrayRepoName,
                bintrayVersionDesc: bintrayVersionDesc
        ];
    }
}
